---
version: '2'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:3.2.0
    network_mode: host
    environment:
      ZOOKEEPER_CLIENT_PORT: 32181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:3.2.0
    network_mode: host
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: localhost:32181
      # If you want to interact with the Kafka broker *from your host*, then on
      # operating systems that require the use of Docker Machine (Mac OS and Windows OS)
      # you must first override the environment variable KAFKA_ADVERTISED_IP to the
      # IP address of the Docker Machine VM before starting the services via
      # `docker-compose up -d`.
      #
      # You do not need to override the environment variable for interacting with the
      # Kafka Music application, ZooKeeper, or Confluent Schema Registry.
      #
      # For example, if the Docker Machine is named "confluent":
      #
      #    $ KAFKA_ADVERTISED_IP=`docker-machine ip confluent 2>/dev/null || echo localhost` docker-compose up -d
      #
      # The default value is set in the `.env` file in this directory because
      # in the Docker Compose v2.0 file format, the `${VARIABLE:-defaultValue}`
      # syntax is not supported yet.
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://${KAFKA_ADVERTISED_IP}:29092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"

  schema-registry:
    image: confluentinc/cp-schema-registry:3.2.0
    network_mode: host
    depends_on:
      - zookeeper
      - kafka
    ports:
      - '8081'
    environment:
      SCHEMA_REGISTRY_HOST_NAME: localhost
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: localhost:32181

  # This "container" is a workaround to pre-create topics for the Kafka Music application
  # until we have a more elegant way to do that.
  kafka-create-topics:
    image: confluentinc/cp-kafka:3.2.0
    depends_on:
      - kafka
    network_mode: host
    # We defined a dependency on "kafka", but `depends_on` will NOT wait for the
    # dependencies to be "ready" before starting the "kafka-create-topics"
    # container;  it waits only until the dependencies have started.  Hence we
    # must control startup order more explicitly.
    # See https://docs.docker.com/compose/startup-order/
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
                       cub kafka-ready -b localhost:29092 1 20 && \
                       kafka-topics --create --topic play-events --if-not-exists --zookeeper localhost:32181 --partitions 4 --replication-factor 1 && \
                       kafka-topics --create --topic song-feed --if-not-exists --zookeeper localhost:32181 --partitions 4 --replication-factor 1 && \
                       sleep infinity'"
    environment:
      # The following settings are listed here only to satisfy the image's requirements.
      # We override the image's `command` anyways, hence this container will not start a broker.
      KAFKA_BROKER_ID: ignored
      KAFKA_ZOOKEEPER_CONNECT: ignored

  # Continuously generates input data for the Kafka Music application.
  kafka-music-data-generator:
    image: confluentinc/cp-kafka-streams-examples:3.2.0
    network_mode: host
    depends_on:
      - kafka
      - schema-registry
      - kafka-create-topics
    # Control startup order similarly to the "kafka-create-topics" container above.
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
                       cub kafka-ready -b localhost:29092 1 20 && \
                       echo Waiting for Confluent Schema Registry to be ready... && \
                       cub sr-ready localhost 8081 20 && \
                       java -cp /app/streams-examples-3.2.0-standalone.jar \
                       io.confluent.examples.streams.interactivequeries.kafkamusic.KafkaMusicExampleDriver \
                       localhost:29092 http://localhost:8081'"
    environment:
      STREAMS_BOOTSTRAP_SERVERS: ignored
      STREAMS_SCHEMA_REGISTRY_HOST: ignored
      STREAMS_SCHEMA_REGISTRY_PORT: ignored
      KAFKA_MUSIC_APP_REST_HOST: ignored
      KAFKA_MUSIC_APP_REST_PORT: ignored

  # Runs the Kafka Music application.
  kafka-music-application:
    image: confluentinc/cp-kafka-streams-examples:3.2.0
    network_mode: host
    depends_on:
      - kafka
      - schema-registry
      - kafka-create-topics
    # Control startup order similarly to the "kafka-create-topics" container above.
    # Note: The container's `run` script will perform the same readiness checks
    # for Kafka and Confluent Schema Registry, but that's ok because they complete fast.
    # The reason we check for readiness here is that we can insert a sleep time
    # for topic creation before we start the application.
    #
    # TODO: Once https://issues.apache.org/jira/browse/KAFKA-5037 is resolved,
    #       we can remove this `command` and use the image as-is.
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
                       cub kafka-ready -b localhost:29092 1 20 && \
                       echo Waiting for Confluent Schema Registry to be ready... && \
                       cub sr-ready localhost 8081 20 && \
                       echo Waiting a few seconds for topic creation to finish... && \
                       sleep 2 && \
                       /etc/confluent/docker/run'"
    ports:
      - '7070'
    environment:
      STREAMS_BOOTSTRAP_SERVERS: localhost:29092
      STREAMS_SCHEMA_REGISTRY_HOST: localhost
      STREAMS_SCHEMA_REGISTRY_PORT: 8081
      KAFKA_MUSIC_APP_REST_HOST: localhost
      KAFKA_MUSIC_APP_REST_PORT: 7070